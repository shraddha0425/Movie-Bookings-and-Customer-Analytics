CREATE DATABASE THEATRE;
USE THEATRE;
-- Table movies
CREATE TABLE movies(movie_id INT PRIMARY KEY AUTO_INCREMENT,title VARCHAR(250), 
release_date DATE, genre VARCHAR(20), rating FLOAT, running_time VARCHAR(20));

-- Table Customers
CREATE TABLE Customers(customer_id INT PRIMARY KEY AUTO_INCREMENT,name VARCHAR(50),gender VARCHAR(10), email_id varchar(50), age int);
DESC Customers;

-- Create booking
CREATE TABLE booking(booking_id INT PRIMARY KEY auto_increment, customer_id INT, movie_id INT, 
booking_date DATE, ticket_quantiy INT, timings TIME, cost NUMERIC(4,2));
DESC booking;

INSERT INTO movies (title, release_date, genre, rating, running_time) VALUES
('The Shawshank Redemption', '1994-09-10', 'Drama', '9.3', '142 minutes'),
('The Godfather', '1972-03-24', 'Crime', '9.2', '175 minutes'),
('The Dark Knight', '2008-07-18', 'Action', '8.9', '152 minutes'),
('The Godfather Part II', '1974-03-25', 'Crime', '9.0', '202 minutes'),
('Pulp Fiction', '1994-10-14', 'Crime', '8.9', '154 minutes'),
('12 Angry Men', '1957-09-13', 'Drama', '8.9', '120 minutes'),
('Schindler''s List', '1993-12-15', 'Drama', '9.2', '195 minutes'),
('The Lord of the Rings: The Return of the King', '2003-12-17', 'Adventure', '8.9', '201 minutes'),
('The Lord of the Rings: The Fellowship of the Ring', '2001-12-10', 'Adventure', '8.8', '178 minutes'),
('The Lord of the Rings: The Two Towers', '2002-12-18', 'Adventure', '8.8', '179 minutes'),
('Inception', '2010-07-08', 'Action', '8.85', '148 minutes'),
('The Matrix', '1999-03-31', 'Action', '8.7', '136 minutes'),
('The Matrix Reloaded', '2003-05-15', 'Action', '7.9', '156 minutes'),
('The Matrix Revolutions', '2003-11-05', 'Action', '7.7', '128 minutes'),
('Interstellar', '2014-11-05', 'Sci-Fi', '8.6', '169 minutes');
Select * from movies;

INSERT INTO Customers (name, gender, email_id, age) VALUES
('John Doe', 'Male', 'johndoe@exp.com', 30),
('Jane Doe', 'Female', 'janedoe@exp.com', 25),
('Mary Smith', 'Female', 'marysmith@exp.com', 40),
('Michael Jones', 'Male', 'michaeljones@exp.com', 35),
('Sarah Brown', 'Female', 'sarahbrown@exp.com', 20),
('David Green', 'Male', 'davidgreen@exp.com', 25),
('Susan White', 'Female', 'susanwhite@exp.com', 30),
('Peter Black', 'Male', 'peterblack@exp.com', 35),
('Kate Blue', 'Female', 'kateblue@exp.com', 20),
('Alex Red', 'Male', 'alexred@exp.com', 30),
('Ben Green', 'Male', 'bengreen@exp.com', 25),
('Cindy White', 'Female', 'cindywhite@exp.com', 30),
('David Brown', 'Male', 'davidbrown@exp.com', 35),
('Peter Smith', 'Male', 'petersmith@exp.com', 40),
('Jane Black', 'Female', 'janeb@exp.com', 20);


Select * from Customers;

INSERT INTO booking(customer_id, movie_id, booking_date, ticket_quantiy, timings, cost) VALUES
(5, 1, '2023-06-01', 2, '18:00', 20),
(15, 3, '2023-06-02', 3, '20:30', 30),
(7, 7, '2023-06-02', 1, '16:15', 10),
(4, 10, '2023-06-03', 2, '19:45', 20),
(6, 5, '2023-06-03', 1, '21:00', 20),
(2, 2, '2023-06-04', 4, '14:30', 40),
(13, 9, '2023-06-04', 3, '17:45', 30),
(1, 4, '2023-06-05', 2, '19:30', 20),
(3, 12, '2023-06-05', 1, '13:45', 30),
(2, 15, '2023-06-05', 2, '18:15', 20),
(4, 6, '2023-06-06', 1, '20:00', 10),
(8, 8, '2023-06-07', 4, '15:30', 40),
(11, 7, '2023-06-07', 3, '17:00', 30),
(14, 13, '2023-06-08', 2, '16:45', 20),
(12, 14, '2023-06-08', 1, '19:15', 10),
(6, 4, '2023-06-09', 2, '21:30', 20),
(9, 9, '2023-06-09', 1, '14:15', 20),
(2, 2, '2023-06-10', 4, '17:30', 40),
(3, 15, '2023-06-10', 2, '20:00', 30),
(5, 6, '2023-06-11', 2, '13:45', 20),
(7, 10, '2023-06-11', 1, '16:30', 10),
(10, 1, '2023-06-12', 4, '18:45', 40),
(11, 11, '2023-06-12', 2, '21:15', 20),
(9, 13, '2023-06-14', 2, '15:00', 20),
(8, 12, '2023-06-15', 1, '17:30', 10);
ALTER TABLE booking modify cost NUMERIC(6,2);
Update booking set cost =cost *10;

Select * from booking;
-- Get the movie rank based on rating in each genre
Select title, rating, genre, DENSE_RANK() OVER (partition by genre order by rating desc) as MOVIE_RANK 
from movies;

-- Top 2 movies from each genre
SELECT genre, title, rating FROM (SELECT m.genre,m.title, m.rating,
        ROW_NUMBER() OVER (PARTITION BY m.genre ORDER BY m.rating DESC) as rn FROM movies m) ranked WHERE rn <= 2;

-- What is the total number of customers in the database as "total_customers"?
Select COUNT(*)as total_customers FROM customers;

--	Find the average rating of movies having running_time greater than 178 as average_rating.
Select round(avg(rating),2)as average_rating from movies where running_time > 178;

--	Retrieve the movie with the longest running time.
Select * from movies order by running_time desc LIMIT 1;

-- Calculate the total revenue generated by the cinema hall based on the cost of bookings between 4th June 2023 to 12th June 2023 as total_revenue.
Select SUM(cost) as total_revenue from booking where booking_date BETWEEN '2023-06-04' AND '2023-06-12';

-- Calculate the total duration (in minutes) of all movies combined that are of the genre Drama as total_duration.
Select concat(SUM(running_time)," minutes") as total_duration from movies where genre='Drama';

--	How many bookings were made on each booking date?
Select booking_date,COUNT(*) as total_bookings from booking group by booking_date;

/*	Calculate the total cost of all bookings made by each customer as total_cost and display the customer's name along with the total cost. Group the results by customer_id.
-- your code goes here */
Select c.name,SUM(b.cost) as total_cost from booking b INNER JOIN customers c ON b.customer_id = c.customer_id group by  c.customer_id;

-- Calculate the total number of bookings as total_bookings made for each movie.

Select m.title, COUNT(b.booking_id) as total_bookings from movies m inner join booking b on m.movie_id=b.movie_id group by m.movie_id;

-- Find the customer id and name of the customer who made the first booking in the database.
Select b.customer_id,c.name from booking b INNER JOIN customers c ON b.customer_id=c.customer_id order by booking_date asc limit 1;

-- Retrieve the customer names and the number of bookings made by each customer as booking_count, sorted in descending order of the booking count.
Select c.name, COUNT(b.booking_id) as booking_count from customers c left join
 booking b ON c.customer_id=b.customer_id group by c.customer_id order by booking_count desc;
 
-- Retrieve the total no of seats booked for a time later than 20:00:00 as total_seats_booked.
Select SUM(ticket_quantiy) as total_seats_booked from booking where timings > "20:00:00" ;

-- Retrieve the details of the customer who has bought the most number of tickets.
Select c.customer_id,c.name,c.gender,c.email_id,c.age,SUM(b.ticket_quantiy)
 from customers c INNER JOIN booking b ON c.customer_id=b.customer_id group by b.customer_id order by sum(b.ticket_quantiy) desc LIMIT 1;
 
 -- retrieve the customer who has made the most bookings?
SELECT c.name, COUNT(*) AS booking_count FROM customers c JOIN booking b ON c.customer_id = b.customer_id GROUP BY c.customer_id ORDER BY booking_count DESC LIMIT 1;

-- SQL query can be used to list the names and ages of customers who have booked tickets for the movie with movie_id = 5
SELECT c.name, c.age FROM customers c JOIN booking b ON c.customer_id = b.customer_id WHERE b.movie_id = 5;
 SELECT c.name, c.age FROM booking b JOIN customers c ON c.customer_id = b.customer_id WHERE b.movie_id = 5;
 SELECT name, age FROM customers WHERE customer_id IN (SELECT customer_id FROM booking WHERE movie_id = 5);
 
-- SQL query to retrieve the count of bookings for each genre.

SELECT m.genre, COUNT(b.booking_id) AS booking_count FROM movies m LEFT JOIN booking b ON
 m.movie_id = b.movie_id GROUP BY m.genre order by booking_count desc;
 
-- List the movie titles and their corresponding average ticket quantities.
SELECT m.title, AVG(ticket_quantiy) AS average_ticket_quantity FROM movies m JOIN booking b
ON m.movie_id = b.movie_id GROUP BY m.title;

-- Retrieve the customer names and their email IDs for bookings made on the date '5th June 2023'.
SELECT c.name, c.email_id FROM customers c JOIN booking b ON c.customer_id = b.customer_id
WHERE b.booking_date = '2023-06-05';

-- Get the details of the movies with the highest rating.
-- SELECT * FROM movies WHERE rating = (SELECT MAX(rating) FROM movies);
Select c.name,m.title,m.rating, m.movie_id,c.customer_id,b.booking_id from movies m inner join booking b on m.movie_id=b.movie_id inner join customers c on c.customer_id=b.customer_id where m.rating = (Select MAX(m.rating) from movies m);

-- count total number of customers based on Gender
Select gender, count(gender) from customers group by gender;

-- Total number of tickets based on the movies 
Select m.movie_id ,m.title,count(b.ticket_quantiy) as Total_Tickets_for_Movie 
from booking b INNER JOIN movies m on m.movie_id=b.movie_id group by m.movie_id order by Total_Tickets_for_movie asc;

-- Total revenue based on genre 
Select b.movie_id,SUM(b.cost) as GENRE_WISE_REVENUE,m.title from booking b INNER JOIN movies m on b.movie_id=m.movie_id 
group by b.movie_id order by GENRE_WISE_REVENUE DESC; 

-- Movies with rating greater than avg rating
Select title,genre,rating from movies where rating < (Select avg(rating) from movies);

-- Genre where running time > 200 minutes
 Select title,genre,rating,running_time from movies where genre IN (Select genre from movies where running_time > 200);
 
 -- Top 1 female and male cumstomer with highest ticket bookings
Select * from (Select c.name,c.gender,b.customer_id,
SUM(b.ticket_quantiy) as total_tickets,
row_number() OVER(partition by c.gender order by SUM(b.ticket_quantiy) desc) as rn
 from customers c inner join booking b on c.customer_id=b.customer_id GROUP BY 
    c.name,b.customer_id)as ranked where rn=1 ;
    
    Select * from movies;
    Select * from customers;
    Select * from booking;
    
    -- Retrieve the day on which most movie tickets where booked 
    Select dayname(booking_date) as day_name,COUNT(*) as Booking_count from booking group by day_name order by count(*) DESC;
    
    -- Movies with least bookings 
    Select m.title, b.ticket_quantiy from booking b inner join movies m on b.movie_id=m.movie_id where b.ticket_quantiy IN (select MIN(b.ticket_quantiy) from booking b);
   
   -- Movies with most bookings 
	Select m.title, b.ticket_quantiy from booking b inner join movies m on b.movie_id=m.movie_id where b.ticket_quantiy IN (select MAX(b.ticket_quantiy) from booking b);
    
    Select * from movies;
    Select * from customers;
    Select * from booking;
    
    Select b.customer_id,c.name,m.title from booking b inner join movies m on b.movie_id=m.movie_id inner join customers c on c.customer_id=b.customer_id;
    Select title,rating from movies where rating = (Select MAX(rating) from movies);